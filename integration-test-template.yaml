AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Integration Test Stack


Mappings:
  LogMap:
    PapertrailLog:
      test: "logs7.papertrailapp.com:32515"
      stage: "logs7.papertrailapp.com:32515"

  FunctionName:
    GenerateUsersFunction:
      test: test-generate-users-integration-test
      stage: stage-generate-users-integration-test
    ImageServiceTestFunction:
      test: test-image-service-integration-test
      stage: stage-image-service-integration-test
    FeedsServiceTestFunction:
      test: test-feeds-service-integration-test
      stage: stage-feeds-service-integration-test
    ActionsServiceTestFunction:
      test: test-actions-service-integration-test
      stage: stage-actions-service-integration-test
    AuthServiceTestFunction:
      test: test-auth-service-integration-test
      stage: stage-auth-service-integration-test
    ComplexTestFunction:
      test: test-complex-integration-test
      stage: stage-complex-integration-test
    BotsFunctin:
      test: test-bots-test
      stage: stage-bots-test
    CreateBotsFunctin:
      test: test-create-bots-test
      stage: stage-create-bots-test

  TableName:
    BotsTable:
      test: test-bots-integration-test
      stage: stage-bots-integration-test

  ApiEndpoint:
    Auth:
      test: "https://test.ringoidapp.com/auth"
      stage: "https://stage.ringoidapp.com/auth"
    Image:
      test: "https://test.ringoidapp.com/image"
      stage: "https://stage.ringoidapp.com/image"
    Actions:
      test: "https://test.ringoidapp.com/actions"
      stage: "https://stage.ringoidapp.com/actions"
    Feeds:
      test: "https://test.ringoidapp.com/feeds"
      stage: "https://stage.ringoidapp.com/feeds"

Parameters:
  Env:
    Type: String
    Default: test
    AllowedValues:
      - test
      - stage
    Description: Env name

Globals:
    Function:
        Timeout: 900
        MemorySize: 512
        Runtime: go1.x
        Environment:
          Variables:
            ENV: !Ref Env
            PAPERTRAIL_LOG_ADDRESS: !FindInMap [LogMap, PapertrailLog, !Ref Env]
            AUTH_API_ENDPOINT: !FindInMap [ApiEndpoint, Auth, !Ref Env]
            IMAGE_API_ENDPOINT: !FindInMap [ApiEndpoint, Image, !Ref Env]
            ACTIONS_API_ENDPOINT: !FindInMap [ApiEndpoint, Actions, !Ref Env]
            FEEDS_API_ENDPOINT: !FindInMap [ApiEndpoint, Feeds, !Ref Env]
            CLEAN_AUTH_DB_FUNCTION_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalCleanDbAuthFunctionExport] ]
            CLEAN_IMAGE_DB_FUNCTION_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalCleanDbImageFunctionExport] ]
            CLEAN_RELATIONSHIPS_DB_FUNCTION_NAME:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, InternalCleanDbRelationshipsFunctionExport] ]
            BOTS_TABLE_NAME: !FindInMap [TableName, BotsTable, !Ref Env]

        Tags:
          Company: Ringoid
          Service: integration-test
          Environment: !Ref Env

Resources:

  GenerateUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, GenerateUsersFunction, !Ref Env]
      Handler: create_users
      CodeUri: ./create_users.zip
      Description: Generate users function (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  ImageServiceTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, ImageServiceTestFunction, !Ref Env]
      Handler: test_image
      CodeUri: ./test_image.zip
      Description: Image service (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  FeedsServiceTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, FeedsServiceTestFunction, !Ref Env]
      Handler: test_feeds
      CodeUri: ./test_feeds.zip
      Description: Feeds service (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  ActionsServiceTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, ActionsServiceTestFunction, !Ref Env]
      Handler: test_actions
      CodeUri: ./test_actions.zip
      Description: Actions service (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  AuthServiceTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, AuthServiceTestFunction, !Ref Env]
      Handler: test_auth
      CodeUri: ./test_auth.zip
      Description: Auth service (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  ComplexTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, ComplexTestFunction, !Ref Env]
      Handler: test_complex
      CodeUri: ./test_complex.zip
      Description: Complex (integration tests)
      Policies:
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite

  #----------------- Bots section ------------------------
  BotsFunctin:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, BotsFunctin, !Ref Env]
      Handler: bots
      CodeUri: ./bots.zip
      Description: Bots
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonSQSFullAccess
        - AWSLambdaFullAccess
        - SecretsManagerReadWrite
      Events:
        BotEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::ImportValue:
                !Join [ "-", [ !Ref Env, BotSqsQueueArnExport] ]
            BatchSize: 1

  CreateBotsFunctin:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [FunctionName, CreateBotsFunctin, !Ref Env]
      Handler: create_bots
      CodeUri: ./create_bots.zip
      Description: Create Bots
      Policies:
        - AmazonDynamoDBFullAccess
        - SecretsManagerReadWrite

  BotsTable:
    Type: AWS::DynamoDB::Table
    Properties:
          TableName: !FindInMap [TableName, BotsTable, !Ref Env]
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S

          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          Tags:
            - Key: Company
              Value: Ringoid
            - Key: Service
              Value: integration-test
            - Key: Environment
              Value: !Ref Env
